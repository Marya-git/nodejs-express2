#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-express2:server');
var http = require('http');
var https = require('https');
var fs  = require('fs');
try {
  var crypto = require('crypto');
} catch (e) {
  console.log('Missing OpenSSL support for HTTPS - Please run "npm install"');
  process.exit();
}

/**
 * Use crypto library for security purposes 
 * USe SSL certificate for https and security . 
 * SSL has different types, e.x.: wildcard certifcate which secures the domain as well as the subdomains of that particular domain
 */
// const { constants } = require('crypto')
// const options = {
//   key: fs.readFileSync('./certs/xxxxx/privkey.pem'),
//   cert:  fs.readFileSync('./certs/xxxxxx/fullchain.pem'),     
//   ca: [
//     fs.readFileSync('./certs/xxxxxxx/chain.pem', 'utf8')    
//   ],
//   secureOptions: constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1,
//     ciphers: ["ECDHE-RSA-AES256-SHA384",
//         "DHE-RSA-AES256-SHA384",
//         "ECDHE-RSA-AES256-SHA256",
//         "DHE-RSA-AES256-SHA256",
//         "ECDHE-RSA-AES128-SHA256",
//         "DHE-RSA-AES128-SHA256",
//         "HIGH",
//         "!aNULL",
//         "!eNULL",
//         "!EXPORT",
//         "!DES",
//         "!RC4",
//         "!MD5",
//         "!PSK",
//         "!SRP",
//         "!CAMELLIA"
//     ].join(':'),
// };
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3009');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// var server = http.createServer(app).listen(port, '0.0.0.0').on('error', onError).on('listening', onListening);

/**
 * Create HTTPs server.
 */

// var secureServer = https.createServer(options, app).listen(8443, '0.0.0.0').on('error', onError).on('listening', onListeningSecure);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
/**
 * Event listener for HTTPs server "listening" event.
 */

// function onListeningSecure() {
//   var addr = secureServer.address();
//   var bind = typeof addr === 'string'
//       ? 'pipe ' + addr
//       : 'port ' + addr.port;
//   console.log('Listening on ' + bind);
// }
